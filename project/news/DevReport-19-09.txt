Lumiera 2019 Development Report
===============================
:Date: Autumn 2019
:Author: Benny Lyons & Hermann Voßeler
:toc:

//Menu: label 19-09 Dev Report


.Introduction
We review the status of the project here.  Traditionally, we present _our_
view of the project.  However, from another perspective, some statistics about
Lumiera from another source, https://www.openhub.net/p/lumiera/[Openhub]
might be interesting:

 - 115,094 lines of code; 88% written in C++
 - using the https://en.wikipedia.org/wiki/COCOMO#History[Basic COCOMO Model],
   this translates into a programming effort of about 30 years; in a commertial
   setup such would relate to a code base value of ~$1.6 million.
 - Very well-commented source code, placing ``Lumiera among the top 10% of all
   C++ projects on Open Hub''.
 - Rated with five stars by 4 people. Two people even clicked ``I use this'' +
   _Who did this?_ confess! ;-)
 - 31% less activity in 2019

So why then less activity over the previous year?  _Ichthyo_ devoted a number of
months pursuing other activities, most notably some music composition projects
and his contribution to the
http://yoshimi.sourceforge.net/[Yoshimi soft synthesiser], which emerged after his
https://media.ccc.de/v/lac2018-12-inbuilt_musicality[Workshop »Inbuilt Musicality« at LAC 2016 Berlin].


Project Activity
----------------

Appropriate Nomenclature
~~~~~~~~~~~~~~~~~~~~~~~~
``What's in a name?'' Juliet says to Romeo in the famous balcony scene by
Shakespeare. Indeed Robert Cecil Martin (aka Uncle Bob) has considerably
more to say about the importance of selecting words to name things in our code.
Modern practice of programming has embraced these ideas and the
importance of this is now widespread.

We've spent considerable time in selecting appropriate vocabulary throughout the
project and we were increasingly unhappy with two terms: ``proc'' and ``backend'',
which over time became misaligned with the actual purpose of these layers. So
we've link:{rfc}/LayerNames.html[decided to rename] these.
The ``proc layer'' is now known as the _steam layer_, and the
``backend'' has been renamed to be the _vault layer_. While the former
`namespace gui` became _the stage._


The Timeline View
~~~~~~~~~~~~~~~~~
The Timeline View has received some developer attention.

Recall that the Timeline is a time axis with one or more outputs. Each
output can have its own configuration. A Sequence can then be attached to the
timeline, and within each Sequence, clips are placed and arranged onto a fork
of tracks.

The timeline obviously features on the stage
and is without a hard wired structure. Fixing the layout of the Timeline would not
be a good idea as the structure of the Timeline is individual and thereby follows
the way an editor prefers to arrange the material. The _session model_ down in
steam layer is very flexible in this respect, and so we need a way to reflect
the current structure onto the stage without creating a tight coupling between
the session and the stage internals.
Building such a feature is time consuming and complex, but thought must be
devoted to its implementation earlier rather than later in the project.

Right now, we are able to trigger a (dummy) structure message from the steam layer,
which is translated into an corresponding arrangement of timeline and track widgets
on the stage.


Status of Support for C++17
~~~~~~~~~~~~~~~~~~~~~~~~~~~
We always strive to support the latest software versions. This is poignantly
evident in our persual to support the latest C\+\+ version.  
We currently support compiling with C\+\+14. Out next objective is to compile with
C\+\+17. We have begun initial work on migrating to compiling with C++17.

