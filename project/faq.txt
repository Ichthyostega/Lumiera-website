FAQ
===
:date: 2023

[qanda]
How can I try Lumiera?::
  Sorry, you can't yet. Lumiera is still in the early stages of development. +
  The core team decided to build the engine and infrastructure bottom-up,
  while the UI is developed to match the capabilities of the core.

What is the meaning of the name »Lumiera«?::
  In 2008, as the separation from Cinelerra-CV project became clear, there was a collaborative
  https://web.archive.org/web/20231026200633/https://lists.cinelerra-cv.org/pipermail/cinelerra-skolelinux/2008-March/013474.html[selection and vote]
  in the community, which at that time was largely the Cinelerra-CV community.
  The name alludes to the
  https://en.wikipedia.org/wiki/Auguste_and_Louis_Lumi%C3%A8re[Lumière brothers]
  and evokes the memory of the fist century of film art, while also expressing
  the connection to the name »Cinelerra«

Is Lumiera a fork of Cinelerra?::
  No. Lumiera is built from scratch. Not a single line of Cinelerra code is now
  used in Lumiera. The project grew out of an effort to amend
  link:{l}/project/background/history/CinelerraWoes.html[long standing problems]
  present in the Cinelerra-CV code base at that time. Lumiera would be unthinkable
  without Cinelerra as point of reference, considering both its strengths and
  weaknesses. The actual technology however is built ground-up, using contemporary
  methods, always keeping in mind the high degree of flexibility required to
  handle common professional data formats.

OMG. Why yet another rewrite? Can't you guys just join another project?::
  May we ask back why the ``other guys'' don't just join the Lumiera project?
+
Seriously. Our project has specific roots, and it has a distinct focus (professional
editing, film making). Other projects have different goals and different value systems.
We choose methods and solutions deemed adequate to reach our ambitious goals, yet
we do not want to spend _our life time_ working with methods we deem inadequate or
pursuing goals we consider not worth pursuing.

Will Lumiera use Nodes?::
  The Lumiera Render Engine uses Nodes and asynchronous pull-processing at its core.
  But we are rather sceptical towards the ``everything nodes'' metaphor as principle
  for UI organisation. This approach is great for individual compositing or FX tasks,
  yet tends to be challenging when it comes to handling a large scale editing project.
  Rather, we attempt to reconcile properties of nodes and classical layering: in
  Lumiera, _everything is a Placement._

When will Lumiera be usable for basic tasks?::
  This is difficult to say. We are ambitious and have a clear vision, yet we choose
  not to make a ``big up-front design'' -- and thus we can not provide a predetermined
  schedule or even a guess. We have built a set of core components thus far and achieved
  some partial integration, but there is still a lot of advanced stuff to work out.
  And our developer team is small.

Is this project dead? I don't see any progress?::
  Rest assured, we're constantly working on this project. Look at the
  link:http://Lumiera.org/gitweb[Git repositories] if in doubt. But regarding the GUI,
  your observation is correct: Work on the GUI has stalled, since we don't have a
  dedicated GUI developer right now, and the other devs are focussed primarily
  at the engine core.

Why the hell did you pick GTK??::
  Lumiera's native interface will be written in GTK, although other interfaces will
  be possible. Basically the GUI is a plug-in. We picked GTK, because, in the early days,
  Joel Holdsworth joined the team. Joel was an experienced Inkscape / GTK developer;
  he contributed a tremendous amount of knowledge and a huge load of code. Later,
  the project successfully switched to GTK-3, and we are confident that GTK provides
  us both with a clean programming model and the necessary degree of freedom
  required to build and maintain that kind of elaborate user interface we aspire
  to provide.

Will there be a Windows version?::
  Windows isn't an Unix flavour, indeed, its internal workings are quite different.
  When it comes to system level programming, there is no such thing as OS neutral
  programming. Either, we'd have to introduce an abstraction layer (which costs
  performance), or we'd have to develop a different back-end for Windows.
+
That being said -- we'll focus on other topics first. Thus it depends on
Someone(TM) to do that work.

Do you rely on hardware acceleration?::
  Hardware acceleration has lots of potential, but it also has lots of potential
  for vendor lock-in. Since the start of our project, the situation has improved
  significantly. But anyway, we choose a different approach. Our core
  _organises_ the rendering and _manages_ the data (buffer, cache) and the metadata
  (data type descriptions). The application will provide preview rendering and
  frame caching. But the actual processing will always be delegated to some
  suitable library and not developed in-project.
+  
Deliberately, Lumiera avoids to lock into a single technology.
