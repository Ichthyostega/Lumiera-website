The Lumiera Project
===================
:Author:	Hermann Voßeler
:Email:	<Ichthyostega@web.de>
:Date:      Juli 2010

Entwurf und Gliederung eines Vortrages, der für die FrOSCon 2010 geplant ist.


Abstract
--------
The Lumiera Project is to write a professional video editor for Linux.
Editing a feature film or documentary imposes specific challenges, translating
into the demand to build a more advanced infrastructure, well beyond just
the processing of video data. 

.Summary for the *FrOSCon10*
************************************************************************************
Das Projekt Lumiera entwickelt einen professionellen Video-Editor für Linux.
Ausgangspunkt sind die besonderen Schwierigkeiten bei Schnitt und Montage eines
Spiel- oder Dokumentarfilmes, für die existierende OpenSource-Werkzeuge nur
mäßige Unterstützung bieten.

Die technische Herausforderung, Videodaten zuverlässig auf einem PC oder einer
Workstation zu bearbeiten, prägte Video-Schnittsoftware der ersten Generation.
Zudem mußte die traditionelle Arbeitsweise nachgeahmt, Schneidetisch und
Magnettonband imitiert werden, um den Übergang zur neuen Computertechnik zu
erleichtern. Mit einiger Verzögerung übertrug sich dieser Ansatz auf die ersten
OpenSource-Videobearbeitungs-Lösungen unter Linux, denn zunächst einmal mußten
die technischen Voraussetzungen geschaffen werden, überhaupt Videodaten einzulesen,
zu dekodieren und zu verarbeiten.

Lumiera, als ein _gegenwärtig neu entwickeltes_ Schnittsystem, kann von ganz anderen
Voraussetzungen ausgehen. Die bisher dominanten technischen Probleme sind durch
gute freie Bibliotheken hinreichend abgedeckt und die eigentlichen Erfordernisse
der Aufgabe können in den Mittelpunkt rücken. Ausgehend von einer Funktionsmächtigkeit,
wie sie etwa Cinelerra bietet, waren Bedienkonzepte und interne Strukturen kritisch
zu prüfen. Bewährte technische Ansätze, wie das ``pull''-Prinzip und ein Netzwerk
von Verarbeitungsknoten, wurden konsequent ausgebaut, für problematische
Bereiche bessere Lösungen gesucht.

Das Lumiera-Projekt definiert den professionellen Anspruch nicht über eine Menge
neu zu erfindender Funktionen. Der Kern der Aufgabe ist, eine Struktur zu schaffen,
die den komplexen Arbeitsabläufen in der Post-Production eines Filmes entspricht.
Diese Struktur muß sich unmittelbar erkennbaren zukünftigen Entwicklungen anpassen.
Exemplarisch sei dies an einigen Themenkomplexen verdeutlicht.

Die wünschenswerte Auflösung der Mediendaten wächst immer noch (2k, 4k, 8k), und
zwar weit stärker, als durch die normale, evolutionäre Leistungssteigerung der
Hardware kompensiert werden kann. Parallelverarbeitung, Hardware-Unterstützung
und der Einsatz von Platzhalter-Daten sind geläufige Antworten. Der zuletzt
genannte Ansatz, das sog. ``Proxy-Editing'', der Einsatz von Platzhalter-Bildern
in geringerer Auflösung, klingt zunächst weit weniger spektakulär, als die
Entwicklung von Spezial-Hardware. Auch ist die Umsetzung einigermaßen mühsam,
denn die gesamte Verarbeitungskette, vom Einlesen der Daten über das Schneiden
bis zum Rendern (oder Erzeugen einer EDL) muß zuverlässig darauf abgestimmt sein.
Jedoch ist diese Lösung generisch und erlaubt so auch dem Independent-Filmemacher,
mit geringem Aufwand Produktionen in hoher Bildqualität.

Neben steigender Maximal-Auflösung fällt vor allem die wachsende Streubreite der
Anforderungen auf. Oft soll ein Projekt sowohl in hoher und in reduzierter Qualität
hergestellt werden, mit mehreren Tonsystemen, Untertiteln und auszugsweise für Youtube.
Ähnliches gilt für die mögliche Unterstützung erweiterter Medien-Technologien, wie
periphonischer Ton (Ambisonics, Wellenfeldysnthese) oder Stereoskopie. Einbau ``von
Unterstützung'' in Form einzelner Erweiterungsfunktionen ist nutzlos, sofern nicht
zuvor schon das Datenmodell, auf dem der Benutzer durch das GUI arbeitet,
_Format-neutral_ definiert ist. Die Anpassung an spezifische Ausgabeformate kann
dann halbautomatisch über Regeln erfolgen.

Und so erweist sich die Aufgabe, ein professionelles Schnittsystem zu entwickeln
nicht so sehr als ein ``number crunching''-Problem. Vielmehr geht es darum, eine
konsistente Zwischenschicht zu schaffen, welche bestehende Technologien verbindet.
Dies reicht von einem intelligenten, persistenten Frame-Cache, über einen Scheduler
paralleler Berechnungs-Jobs, über ein formatneutrales Datenmodell und ein Typsystem
für Mediendaten, bis zu einer Plug-in-Verwaltung, die zuverlässig mit Versionierung
und Kompatibilitäten umgehen kann.

Nicht zuletzt aber ist Lumiera ein OpenSource-Projekt, und es ist uns gelungen, eine
aktive und anregende Community aus Entwicklern, Medienschaffenden, Künstlern und
Technik-Begeisterten zu versammeln.
************************************************************************************

WARNING: !! Draft !!


Professionelles Medienschaffen
------------------------------

Lumiera zielt auf professionellen Video/Filmschnitt. Was heißt hier ``professionell''?

- zunächst der Gegensatz _professionell_ <--> _amateurhaft_
- _professionell_ heißt nicht notwendig _kommerziell_
- _professionell_ heißt nicht notwendig _industriell_

-> _professionelle Arbeit steht unter einer *leitenden Hinsicht*_ +
Diese äußere oder innere leitende Hinsicht bestimmt die Arbeit und das Produkt.
Für Film- und Medienschaffen ist das heutzutage zumeist die *Wirkung* -- es kann
aber auch Anderes sein, wie z.B. eine politische Absicht, das Aufzeigen einer Wahrheit,
oder ein Kunstprinzip.

Werkzeuge und Gerätschaften stehen damit in einem anderen Zusammenhang als für einen Amateur.


Zuverlässigkeit::

   - vorhersagbare und reproduzierbare Ergebnisse
   - stabiles Verhalten; Wiederherstellbarkeit nach Fehlern

Qualität::

   - genau definierte Anforderungen über die ganze Verarbeitungskette erhalten
   - bei Bedarf müssen auch minutiöse Details exakt und zuverlässig kontrollierbar sein
    
Effizienz::

   - die in der Praxis elementaren Handgriffe müssen einfach auszuführen sein
   - auch Spezialbehandlungen müssen in einen glatten Gesamtablauf integriert werden
   - effektiver Ressourceneinsatz
    
Anpassunsfähigkeit::

   - verschiedene Projekt-Arten
   - verschiedene Arbeits-Stile
   - unterschiedlich leistungsfähige Hardware
   - Einzel- und Gruppenarbeit

Dauerhaftigkeit::

   - Projekte können eine erhebliche Laufzeit haben.
   - durch Anpassungen und Erweiterungen darf keine Arbeit verloren gehen.
   - keine explizite Abhängigkeit von speziellen Gerätschaften oder Trends


Die Pionier-Zeit ist vorbei
---------------------------
The first generation of video editing software was driven by the technical challenge
of getting video playback and computer based processing to work reliably. The first
proffessional NLEs where competing with the conventional hardware based workflow of
editing chemical film. Seasoned professionals had to be conviced to give up their
familiar work environment learn to handle a fundamentally different kind of tooling.
Somewhat comparable, 10 years later the first generation of video editing software
for Linux had still to re-create the basic environment for working with video, using
just open source tools.

Inzwischen steht außer Frage, daß Filmschnitt- und Montage nur noch in Software erfolgt.
Die Arbeitsabläufe sind weitgehend fest, das Prizip des "non linear editing" ist etabliert.
Auch die grundlegenden Technologien zur Computerbasierten Filmaufnahme und Wiedergabe sind
nur noch Thema für Spezialforschungen. Selbst für einen reinen OpenSource-Ansatz gibt es
eine ganze Reihe ausgereifter Bibliotheken zum Handhaben der gängigsten Medienformate.

- Es ist an der Zeit, von der Fixierung auf die Basistechnologie freizukommen.
- Durch das Nachahmen klassisch- analoger Arbeitsabläufe haben wir uns einige unsinnige
  Einseitigkeiten eingehandelt
- Gegenstand sollte die professionelle Schnitt- und Medienarbeit sein
- Es besteht eine Diskrepanz zwichen diesen Anforderungen und den Möglichkeiten bestehender Software


Problemstellungen in professionellen Film/Schinittprojekten
-----------------------------------------------------------

Beispiel 1: Vorschau und Vollauflösung
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Beispiel 2: Tonmontage
~~~~~~~~~~~~~~~~~~~~~~

Beispiel 3: Erzählstruktur
~~~~~~~~~~~~~~~~~~~~~~~~~~

Beispiel 4: Varianten und Ausgabeformate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Alle diese Probleme sind aus _rein technologischer Sicht trivial._ Aber sie lassen sich nicht
einfach als ``features'' an ein bestehendes Programm ``anflanschen''. Vielmehr ist eine handwerklich
saubere Softwareentwicklung notwendig, um sie auf allen Ebenen zur Geltung zu bringen.


Lumiera Architecture
--------------------
- three layers, not two
- script-driven operation
- orthogonality and configurable operation
- extensible on all levels
- language-neutral bindings

Hardware Trends
---------------
- media resolution still increasing
- hardware acceleration questionable
- ubiquitous networking
- massive parallelism


Project and Community
---------------------
- users _and_ developers
- distributed development model

image::/Heart-beat.gif[]


WARNING: !! Draft !!

