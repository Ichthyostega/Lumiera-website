== BuilderMechanics
:Author: Ichthyostega
:Date Created: 200805210256
:Date Changed: 200810170220
:Count Changes: 3
// design dynamic Builder

The cooperation of several components creates a context of operation for the primary builder working tool, the <<renderengine-PlanningNodeCreatorTool,node creator>>

* the BuilderToolFactory acts as the 'builder for the builder tools', i.e. we can assume to be able to retrive all needed primary tools and elementary tools from this factory, completely configured and ready to use.
* the <<renderengine-BuilderAssembler,Assembler>> has the ability to consume objects from the high level model and feed them to the node creator (which translates into a dispatch of individual operations suited to the objects to be treated). This involves some sort of scheduling or ordering of the operaions, which is the only means to direct the overall process such as to create a sensible and usable result. _This is an fundamental design decision:_ the actual working tools have no hard wired knowledge of the 'right process', which makes the whole Builder highly configurable ('open').
* the <<renderengine-ConManager,connection manager>> on the contrary is a passive service provider. Fed with <<renderengine-WiringRequest,wiring requests>>, he can determine if a desired connection is possible, and what steps to take to implement it; the latter recursively creates further building requests to satisfy by the assembler, and possibly new wiring requests.

=== pattern of operation
The working pattern of this builder mechanics can be described as triggering, enqueuing, priorizing, recursing and exhausting. Without the priorizing part, it would be a depth-first call graph without any context state, forcing us to have all cross reference information available at every node or element to be treated. We prefer to avoid this overhead by ordering the operations into several phases and within these phases into correlated entities with the help of a *weighting function* and scheduling with a *priority queue*

=== call chain
After preparing the tools with the context state of this build process, the assembler drives the visitation process in the right order. The functions embedded within the visitor (NodeCreatorTool) for treating specific kinds of objects in turn use the toolkit (=the fully configured tool factory) to get the mould(s) for the individual steps they need to carry out. This involves preparing the mould (with the high-level object currently in-the-works, a suitable processing pattern and additional references), followed by operating the mould. The latter 'plays' the processing pattern in the context of the mould, which, especially with the help of the operation point, carries out the actual building and/or connecting step. While doing so, the node factory will be invoked, which in turn invokes the wiring factory and thus pre-determines the node's prospective mode of operation when later called for rendering.

