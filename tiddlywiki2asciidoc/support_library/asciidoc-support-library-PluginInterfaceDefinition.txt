== PluginInterfaceDefinition
:Author: MichaelPloujnikov
:Date Created: 200707111319
:Date Changed: 200707160400
:Count Changes: 19
// excludeMissing

Interfaces are declared in header files. They use some tool macros to give a convenient definition language.

=== Thoughts

Interfaces are immutable with the exception that new functions may be added. Versioning should stay out of the view most of the time.

=== Brainstorming

An interface needs a name and a version. They define a block where the actual function prototypes can be added. New prototypes have to be added at the end, existing prototypes must never be changed.

[source,c]
----
LUMIERA_INTERFACE(name, version,
	...
);
----


Each function prototype must be given with its different parts: return type, name, arguments list, and version.

[source,c]
----
	LUMIERA_IPROTO(ret, name, (args)),
----


=== Example
Together this would look like

[source,c]
----
LUMIERA_INTERFACE(foo, 1,
	LUMIERA_IPROTO(void, bar, (void)),
	LUMIERA_IPROTO(int, baz, (int i))
);

LUMIERA_INTERFACE(foo, 2,
	LUMIERA_IPROTO(void, bar, (void)),
	LUMIERA_IPROTO(int, baz, (float i))
);
----

Note that the version 2 interface changed the parameter from int to float for the 'baz' function.

The above gets expanded to:

[source,c]
----
struct lumiera_interface_foo_1
{
	struct lumiera_interface interface_header_;
	void (*bar) (void);
	int (*baz) (int i);
};

struct lumiera_interface_foo_2
{
	struct lumiera_interface interface_header_;
	void (*bar) (void);
	int (*baz) (float i);
};
----
