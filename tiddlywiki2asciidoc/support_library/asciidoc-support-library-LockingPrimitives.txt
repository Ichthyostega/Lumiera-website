== LockingPrimitives
:Author: CehTeh
:Date Created: 200709021250
:Date Changed: 200709021253
:Count Changes: 3

=== Provided Locking Primitives
The support library provides wrappers around some pthread locking primitives to make their usage more robust and easier.

The basic concept is that each locking primitive is an object as well as each locker is implemented as object too, this adds a small convenience layer for robustness. We use NoBug to assert that locks are properly unlocked.

==== Mutex
We only support fast (non recursive, non errorcheck) mutexes for now. Debugging deadlock detection will be done in NoBug. If we need dynamic deadlock detection we will have to support errorcheck mutexes at demand. Same for recursive mutexes.

==== Condition Variables
Condition variables are simple synchronization devices, refer to the doxygen docs about using them. One needs to lock them when preparing to wait on them and finally unlock them. While signaling can optionally be done without a locker object (locking is implicit then).

==== Read/Write Locks
Similar to mutexes we support multiple-reader/one-writer locks, they can be used whenever many concurrent read accesses and rare write accesses are expected to some datastructure (profile this later). When congestion rather unexpected then prefer a mutex.

=== No Semaphores Rationale
Semaphores have quite ugly semantics and are very hard to debug. For now (and likely forever) we will not to use them.

=== ToDo
==== trylock and timedlock
is not yet implemented but will be added in request.

==== Barriers
will be added on request too.

==== Thread Cancellation
Thread cancellation policies are not yet finally decided, for now we consider threads uncancelable!

