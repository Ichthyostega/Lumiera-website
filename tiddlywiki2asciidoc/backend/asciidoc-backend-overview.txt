== Overview
:Author: CehTeh
:Date Created: 200706200040
:Date Changed: 200803271022
:Count Changes: 13

Whenever Lumiera needs to access data this is done through the +DataBackend+ described here. 

There are two main kinds how data is handled:

* Project Description and EDL's are handled in a +InMemoryDatabase+ which uses a +Serializer+ for storing and logging modifications.
* Media (audio, video, ...) is mapped as described below.

The backend uses memory mapping to make data available to the program. This is little different to more common open/read/write/close file access while giving superior performance and much better memory utilization.

The data backend must be capable to handle more data than will fit into the memory or even address space on 32 bit architectures.  Moreover a project may access more files than the OS can handle at a time, thus the for ++File++s used by the +Backend+ it needs a <<backend-FilehandleCache, +FilehandleCache+>> to manage <<backend-FileHandle, +FileHandle+>>s dynamically.

Which parts of a +File+ are actually mapped to physical RAM is managed by the kernel, it keeps a <<backend-FileMapCache, +FileMapCache+>> to manage the <<backend-FileMap, +FileMap+>>s we've set up.

The application itself only requests <<backend-Frame, +Frame+>>s from the Backend.

To minimize latency and optimize CPU utilization we have a <<backend-Prefetch, +Prefetch+>> thread which operates a <<backend-Scheduler, +Scheduler+>> to render and cache frames which are expected to be consumed soon. This prefetcher keeps +Statistics+ for optimizing performance.

