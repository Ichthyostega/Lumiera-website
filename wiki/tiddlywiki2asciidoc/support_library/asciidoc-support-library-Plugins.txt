== Plugins
:Author: CehTeh
:Date Created: 200707111054
:Date Changed: 200708120129
:Count Changes: 26

Lumiera will use a very simple and language neutral plugin system. The focus is on easy and independent distribution of plugins and small specific interfaces. Ultimate flexibility is of second concern.

=== Concept
Plugins are just shared libraries which offer well defined Interfaces. A Plugin may offer more than one interface and may in turn request/use interfaces from other Plugins or from the main application.

=== Interfaces
Plugin interfaces are simple C structs with some metadata at the beginning and function prototypes added at the end. With some macros we can map simple functions to versioned interfaces. Compiled plugins will stay compatible even if the interface is extended, while sourcecode need maintenance.

This fosters the idea of updating plugins when the source is available, while still having the ability to deploy packaged binary plugins which will be compatible with newer interface versions.

The Plugin System is written in C with some helper preprocessor macros. There will be some support to handle C++ specialties.

=== Versioning

Each interface/prototype is versioned. How this works together is explained in PluginVersioningCases. Version identifiers will be used to form a C identifier. I suggest to use a monotonic incrementing number, starting at 1 for versioning and maybe using a special number 0 for interfaces which are in development. When the interface development is finished the 0 has to be replaced by the next number in turn. This ensures that no-one accidentally uses/relies on an interface which is not yet well defined.

=== Plugin Support includes
* <<support-library-PluginInterfaceDefinition, An interface definition language>>
* <<support-library-PluginInterfaceImplementation, An interface implementation language>>
* <<support-library-SelectingInterfaces, Selecting interface based on capabilities>>
* <<support-library-PluginLibrary, Library support to access plugins>>

=== Tutorial, how to use Plugins
* <<support-library-HowtoDefineInterface, Define an interface>>
* Implement an Plugin with an interface in
** <<support-library-HowtoCPlugin, C>>
** <<support-library-HowtoCppPlugin, C++>>
* <<support-library-HowtoUsePlugin, Use this Plugin>> 

==== Planned
* enumerating interfaces of a plugin
* pattern matching interfaces -- find the best possible interface

