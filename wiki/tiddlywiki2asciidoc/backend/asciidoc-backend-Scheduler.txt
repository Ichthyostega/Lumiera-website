== Scheduler
:Author: CehTeh
:Date Created: 200706220108
:Date Changed: 200708101610
:Count Changes: 7

Scheduling is done with two priority queues, one for high priority jobs and one for low priority jobs. These priority queues are ordered by absolute time values (and a job identifier, details will be worked out at implementation time).

There are following (non exhaustive) kinds of jobs:

* start job
* cancel job, if not finished (abort when out of time)
* unschedule job

Jobs implement a kind of future, datastructures which block a querier until data is available.

The Job scheduler runs singlethreaded. Its only task is to schedule and delegate jobs to worker threads, by itself it will never do any extensive processing!

Each job has an option what to do when its times expires (abort, proceed).

The high priority queue is ordered by the 'start' time T, when the job has to be started (plus some hystersis H). A high priority job becomes scheduled beginning with time T but no later than T+H. 

The low priority queue is ordered by 'end' time T, when the job has to be finished (minus a spawn S). Low priority jobs are started as soon as system load permits, the high priority queue is empty (for some usec in future, lets say 100) and the time is earlier than ~T-S. When a job is expired, it is removed from the queue, when it is already running it is handled as defined in its expire policy.

Canceling and expireing jobs gets noted in +Statistics+ to adjust performance and timings for optimal performance.