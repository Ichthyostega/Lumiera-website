== SCons
:Author: Ichthyostega
:Date Created: 200708180211
:Date Changed: 200708180224
:Count Changes: 3
// organization buildsys

link:http://www.scons.org[SCons] is an 'alternate build system' written in Python and using specific python-scripts for defining the buildprocess. These build scripts, called +SConstruct+ and +SConsscript+ are indeed 'definitions', not scripts for _doing_ the build. If you are new to SCons (and familiar with make), you should really read the link:http://www.scons.org/doc/0.97/HTML/scons-user/book1.html[Introduction of the users guide], because SCons is quite a different beast then make and the autotools.

To learn how to use SCons and to get a better feeling of its strenghtes and weaknesses, Ichthyo started a SCons based build system for Lumiera in July 2007 and will maintain it for some time parallel to the automake system (maintained by Cehteh). Every build system looks good in theory and has some big advantages, but only in real use one can see how much effort is needed to keep up with the demands of a given project.

=== some Notes
* we build always in the top level directory
* at the moment, we use no separate build directory, rather we place the object files alongside with the sources
* but we place the created executables and shared libraries into one +$BINDIR+ (configurable in the top level +SConstruct+)
* note: for SCons, each file (which is buildable) and each directory (containing buildable files) is on itself a Target.
* additionally, we provide some 'aliases'
 - build == +$BINDIR+
 - install places some of the created artifacts into +$DESTDIR+
 - testcode is an alias for all the executables comprising the testsuite
 - check == directory +tests+ and runs the testsuite
* run +scons -h+ to get additional explanations.

Typically, one would just write the necessary definitions as they come into one global scope. But because the buildscripts are actually Python scripts, ichthyo found it preferable to use some more structuring and break down the code into several python functions and pass all necessary variables as parameters. This may seem overkill at first look, but the Lumiera project is expected to become a large project.

Moreover, one could simply list all needed files or break everything down into a hierarchical build. But instead, we use for most objects a helper function (located in +admin/scons/Buildhelper.py+) called +srcSubtree()+, which will scan a directory tree and add all +'*.c','*.cpp','*.cc'+ - files as Object nodes to the build process. Besides that, we use the hierarchical aproach rather reluctantly: at the moment, only the subtree for separate tools and the tests-directory have a separate buildscript. Probably, the subtree for plugins will get one as well at some point in the future.