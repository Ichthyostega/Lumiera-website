== What Use is BOUML?
:Author: Ichthyostega
:Date Created: 200706260559
:Date Changed: 200708051535
:Count Changes: 3
// discuss policy

The question to find out about is: how much of the coding to do with the help of BOUML. Basically, BOUML is capable to permanently support the coding; you can define all entities, fields and methods in the UML model an just develop the method bodies 'conventionally' with a text editor. 

*Ichthyo* tends to be sceptical about this approach. While it probably will work, it is questionable if it will result in *good code* the fear is, that this rigid hierarchical structure distracts from the more complex semantical concerns.

Another approach could be to use BOUML just to create the basic structures and from this point on rather utilizing it for technical documentation.

=== After some use

After having used BOUML now (August 07) to some extent, Ichthyo notes down his observation:

.Assessment
* it is fast, rock stable and complete up to a medium requirement level.
* the drawing functions are just basic and insufficient for corporate level demands, just enough for creating design drafts
* I miss real world round trip capabilities. Basically, it works fine as long as BOUML is the primary programming environment

.Benefits

setting up new Entities together with all relations and the most important operations is very fast and convienient with bouml. You can get a fairly complete and consistent skeleton of some subsystem much more rapidly than when creating classes from templates in a normal IDE

.Drawbacks

For fleshing out more implementation centric parts, it is seriousely lacking expressiveness, as far as C++ is concerned. This is partially due to the nature of UML. As a warning example, look at the source code of BOUML together with it's  'plugouts'. It has about 250kLOC, several thousand source files, most of this caused by duplicating whole class hierarchies, set up in a classificatory manner (which is a big no-no for most modern object oriented programming styles).

*Conclusion* +
I want to try out the following aproach:

* use it for reasoning about structure
* use it for setting up all new major entities
* don't use it for _real programming_