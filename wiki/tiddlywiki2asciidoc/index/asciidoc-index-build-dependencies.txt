== Build Dependencies
:Author: Ichthyostega
:Date Created: 200708120103
:Date Changed: 200904192357
:Count Changes: 22
// organization buildsys

.Building
* gcc (4.1), glibc6 (2.3), libstdc++6 (4.1)
* <<index-build-system, build system>> dependencies: <<index-SCons,SCons>> (0.96.90), Python (2.4), pkg-config
* link:http://gmerlin.sourceforge.net/gavl.html[GAVL] (1.0.0)
* NoBug for Logging, Tracing, Asserting (can be obtained from link:http://www.pipapo.org/pipawiki/NoBug[Pipapo.org])
* NoBug needs <<index-valgrind,Valgrind>> (3.2), execinfo.h and libpthread ( -- glibc)
* std::tr1 &amp;mdash; esp. for the former BOOST::shared_ptr (which is now proposed standard)
* BOOST ~(listed below are the DEBIAN package names)~
 - libboost-dev (>=1.34.1-2)
 - libboost-program-options-dev (>=1.34.1-2)
 - libboost-program-options1.34.1 (>=1.34.1-2) *NOTE: binary dependency*
 - libboost-regex-dev (>=1.34.1-2)
 - libboost-regex1.34.1 (>=1.34.1-2) *binary*
* for the GUI: gtkmm-2.4 gdl-1.0 libglibmm-2.4 cairomm-1.0 xv
 - libgtkmm-2.4-dev (>=2.8)
 - libcairomm-1.0-dev (>=0.6.0)
 - libgdl-lum-dev or libgdl-1-dev (>=2.27.1)
+
--
  * libglade2-dev (>=2.6)
	* libxml2-dev (>=2.6)
--
 - libglibmm-2.4-dev (>=2.16), requiring glib2.0 (>=2.16) and gthread-2.0 (>=2.12.4)
 - libxv-dev (>=1.0.2)
* for rendering the icons: librsvg-2.0 
 - librsvg2-dev (>= 2.18)
 
_usually, newer versions are OK_

boost 1.35 works too.

We use the GNOME Docking Library (GDL) within the Lumiera GTK GUI. As we actively participate in GDL development, we depend on a much more recent version, than most distos provide. We maintain a custom debian package (and source tree of GDL) which builds a +libgdl-lum.so+, in order to avoid side effects on other software. You may grab the tree including the Debian source package structure from link:http://git.lumiera.org/gitweb?p=gdl-package;a=shortlog;h=refs/heads/debLumiera[our git] and create a binary Debian (or Ubuntu) package. For non-Debian systems, you may use the same build tree just in the standard way (configure, make, make install) to install into +/usr/local/lib/libgdl-lum.so+. Alternatively you may of course always just use a recent snapshot of GDL and build and install it as usual &amp;mdash; but doing so may cause other software on your system to use this bleeding edge version of GDL too.


.Running
* ... not running? walking?
