== test.sh
:Author: CehTeh
:Date Created: 200708131509
:Date Changed: 200708182045
:Count Changes: 12
// buildsys organization testsuite

=== The Test Script
To drive the various tests, we use the script +tests/test.sh+. All tests are run under valgrind control if available unless +VALGRINDFLAGS=DISABLE+ is defined.

* The SCons buildsystem will build and run the testcode when executing the target +scons tests+.
* This test script is integrated in the automake build and will be used when +make check+ is called.

=== Options for running the Test Suite

.One may define +TESTMODE+ containing any one of the following strings
* +FAST+ only run tests which failed recently
* +FIRSTFAIL+ abort the tests at the first failure

The variable +TESTSUITES+ may contain a list of string which are used to select which tests are run. If not given, all available tests are run.

putting this together a very fast check (when using automake) while hacking on the source would look like:

----
VALGRINDFLAGS=DISABLE TESTMODE=FAST+FIRSTFAIL make check
----

This doesn't catch all errors, notably not regressions, but is useful to do coarse checks.

Running the testsuite with everything enabled is just:

----
make check
----

=== Writing Tests

Test-Definitons are written in files named +NNname.tests+ in the +tests+ dir, where NN is a number defining the order of the various test files, +name+ should be a descriptive name about whats going to be tested.

.In a .tests file one has to define following
* +TESTING <description> <binary>+ set the program binary to be tested to <binary>, <description> should be a string which is displayed as header before running following tests
* +TEST <description> [optargs] <<END+ run the previously set binary with [optargs], <description> is displayed when running this test. A detailed test spec must follow this command and be terminated with +END+ on a single line. Test specs can contain following statements:
 - +in: <line>+ send <line> to stdin of the test program
 - +out: <line>+ expect <line> at the stdout of the test program
 - +err: <line>+ expect <line> at the stderr of the test program
 - +return: <status>+ expect <status> as exit status of the program

If no +out:+ or +err:+ is given, stdout and stderr are not considered as part of the test. If no +return:+ is given, then 0 is expected.

==== Numbering Tests

It needs to be ensured that simpler tests come before more complex ones and that dependant tests come after their dependencies.

.Here is the order suggested
[grid="rows"]
`30`240~~~~
00,"The test system itself"
01..,"Infrastructure, package consistency etc."
10..,"Basic support library functionality"
20..,"Higher level support library services"
30..,"Backend Unit tests"
40..,"Proc Layer Unit tests"
50..,"User interface Unit tests (Gui, Scripting)"
60..,"Unit interaction tests (Backend, Proc, UI, ...)"
70..,Functionality tests on the complete program
80..,Reported bugs which can be expressed in a test case
90..,"Optional tests, example code etc."
~~~~